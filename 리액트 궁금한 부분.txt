커스텀 속성, 자식 요소, 컴포넌트 내 다양한 슬롯 설정, 다양한 wrapper 요소, 식별자
, wrapper Element, 다양한 HTML 요소를 동적으로 설정, 속성의 기본값
프래그먼트, 양방향 바인딩, 파생된 상태, 헬퍼 함수, 상태 끌어올리기, media 쿼리
pseudo, 재사용 가능 컴포넌트 생성 및 컴포넌트 조합, 테일윈드 css
컴포넌트 합성, children 속성, React context API, useContext 훅
컨텍스트를 사용하는 여러 방법(provider, consumer - 이 방법은 다소 길고 복잡하기 때문에 읽는 것 또한 더 어려워서
기본 접근법으로는 적절하지 않다.)
컨텍스트 아웃소싱 - 모든 컨텍스트 관련 데이터 관리를 앱 컴포넌트가 아닌 별개의 컨텍스트
컴포넌트에 넣을 수 있도록 해 주는 것.
useReducer
Reducer

분리된 제공자 컴포넌트에 State(상태) 부여

리액트에서는 DOM을 직접 조작하지 않고 선언적 코드를 사용해야 한다!

재사용하지 않고 일회성으로 사용할 스타일은 styled-components를 이용해서 일회성으로 작성하는 것이 좋으나
여러 곳에서 사용하는 component와 스타일이면 

항상 재사용 가능한 컴포넌트를 외부로 분리할 수 있는 기회를 찾아줘야 한다
이러한 컴포넌트는 애플리케이션의 다른 부분에서 필요한 특정 스타일이 적용된 경우가 많다.
또는 jsx요소의 특정 조합이 다른 부분에서 재사용될 필요가 있는 경우도 있다.

상태는 최대한 적게 사용하고 최대한 많은 값을 파생 및 연산하도록 하는 것이 좋다!!!
상태 끌어올리기
- 가장 가까운 부모 컴포넌트에서 진행한다.

상태를 불변한 방식으로 업데이트

다른 상태를 병합하지 않도록

컴포넌트, 속성, JSX

react public 디렉토리
- React 프로젝트에서는 `public` 폴더가 웹 서버의 루트 디렉토리로 간주된다. 따라서 `public`
폴더 내의 파일은 절대 경로로 접근할 수 없다.

public 폴더는 루트 디렉토리로 매핑되므로, 절대 경로 /game-logo.png로 접근해야 합니다.


인스턴스의 분리된 동작 방법

상태를 이전 값에 기반하여 변경할 경우 함수를 하나 전달해야 한다.
해당 상태 변경 함수로 보내야 한다.
반환하고자 하는 새로운 상태값으로 보내면 안된다.

왜냐하면 전달하는 함수를 리액트가 호출하여 자동적으로 현재 상태값을 가지게 되기 때문이다.


이거 무조건 듣기!!
https://academind.com/tutorials/reference-vs-primitive-values

상태를 끌어올리면 안되는 경우


