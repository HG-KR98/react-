{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\react-route-upgrade\\\\frontend\\\\src\\\\pages\\\\Event.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const events = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\n\n// 이 loader 코드는 서버에서 실행되지 않는다. (브라우저에서만 실행됨.)\n// 그럼에도 Response 생성자를 생성할 수 있는 이유는 브라우저에서 기능을 지원하기 때문이다.\nexport async function loader() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    // ...\n  } else {\n    const resData = await response.json();\n    // Response의 첫번째 인자는 어떠한 데이터도 받는 인자이며\n    // 두번째 인자는 설정할 수 있는 추가 객체를 이용해서 그걸 더욱 자세히 설정할 수 있다.\n    // 예를 들어서 응답 상태 코드를 예시로 들 수 있다.\n    // 이러한 Response 생성자를 사용할 때 loader에서 응답을 리턴할 때마다\n    // 리액트 라우터 패키지는 useLoaderData를 사용할 때 응답에서 자동으로 데이터를 추출한다.\n    // useLoaderData가 리턴하는 데이터는 loader에서 리턴한 응답의 일부인 응답 데이터이다.\n\n    // return resData.event;로도 충분히 별도의 응답 객체를 생성할 수 있다.\n    // 이 편이 좀 더 코드도 더 짧다. 하지만 new\n\n    const res = new Response();\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","resData","json","res","Response","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/react-route-upgrade/frontend/src/pages/Event.js"],"sourcesContent":["import { useLoaderData } from \"react-router-dom\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const events = useLoaderData();\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\n// 이 loader 코드는 서버에서 실행되지 않는다. (브라우저에서만 실행됨.)\r\n// 그럼에도 Response 생성자를 생성할 수 있는 이유는 브라우저에서 기능을 지원하기 때문이다.\r\nexport async function loader() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    // ...\r\n  } else {\r\n    const resData = await response.json();\r\n    // Response의 첫번째 인자는 어떠한 데이터도 받는 인자이며\r\n    // 두번째 인자는 설정할 수 있는 추가 객체를 이용해서 그걸 더욱 자세히 설정할 수 있다.\r\n    // 예를 들어서 응답 상태 코드를 예시로 들 수 있다.\r\n    // 이러한 Response 생성자를 사용할 때 loader에서 응답을 리턴할 때마다\r\n    // 리액트 라우터 패키지는 useLoaderData를 사용할 때 응답에서 자동으로 데이터를 추출한다.\r\n    // useLoaderData가 리턴하는 데이터는 loader에서 리턴한 응답의 일부인 응답 데이터이다.\r\n    \r\n    // return resData.event;로도 충분히 별도의 응답 객체를 생성할 수 있다.\r\n    // 이 편이 좀 더 코드도 더 짧다. 하지만 new\r\n\r\n    const res = new Response();\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,MAAM,GAAGN,aAAa,CAAC,CAAC;EAE9B,oBAAOG,OAAA,CAACF,UAAU;IAACK,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACL,EAAA,CAJQD,UAAU;EAAA,QACFJ,aAAa;AAAA;AAAAW,EAAA,GADrBP,UAAU;AAMnB,eAAeA,UAAU;;AAEzB;AACA;AACA,OAAO,eAAeQ,MAAMA,CAAA,EAAG;EAC7B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;EAAA,CACD,MAAM;IACL,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACrC;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA,MAAMC,GAAG,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC5B;AACF;AAAC,IAAAR,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}