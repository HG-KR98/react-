{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\react-route-upgrade\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useParams, useLoaderData, useRouteLoaderData, json, redirect } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  // const params = useParams();\n  // const data = useLoaderData();\n  const data = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(EventItem, {\n    event: data.event\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this)\n  // <>\n  //   <h1>{params.someId}</h1>\n  //   <Link to=\"..\" relative=\"path\">\n  //     Back\n  //   </Link>\n  // </>\n  ;\n}\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\n\n// loader 함수를 호출하는 리액트 라우터가 실행되면\n// 객체 하나가 loader 함수에 전달된다. 이 객체에는 request와 params라는 프로퍼티가 들어있다.\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  // 싱글 이벤트에 관한 데이터를 가져오기 위해 fetch 함수를 사용\n\n  // const response = await fetch('http://localhost:8080/events/' + id);\n  // return response;\n  // 이 방법도 있지만 아래의 방법도 활용이 가능하다\n  // 리액트 라우터는 자동으로 Promise를 기다렸다가 그게 리졸빙한 데이터에 엑세스하게 해준다.\n  // return fetch('http://localhost:8080/events/' + id);\n\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n  // 이렇게 loader를 추가한 후 이제 loader를 라우트 정의에 등록해야 한다.\n  // 리액트 라우터는 loader를 자동으로 찾지 않기 때문에 loader 함수만 추가해서는\n  // 아무런 역할을 하지 않는다.\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  // 이렇게만 작성해서 요청을 하게되면 이벤트를 삭제하지 않는다.\n  // 이벤트를 삭제하는 건 백엔드가 기다리고 있는 요청이 아니기 때문이다.\n  // 대신에 우리는 여기서 전송하는 이 요청을 설정해야 한다.\n  // const response = await fetch(\"http://localhost:8080/events/\" + eventId);\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event.\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","useLoaderData","useRouteLoaderData","json","redirect","EventItem","jsxDEV","_jsxDEV","EventDetailPage","_s","data","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","request","params","id","eventId","response","fetch","ok","message","status","action","method","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/react-route-upgrade/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import {\r\n  useParams,\r\n  useLoaderData,\r\n  useRouteLoaderData,\r\n  json,\r\n  redirect,\r\n} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\n\r\nfunction EventDetailPage() {\r\n  // const params = useParams();\r\n  // const data = useLoaderData();\r\n  const data = useRouteLoaderData(\"event-detail\");\r\n\r\n  return (\r\n    <EventItem event={data.event} />\r\n    // <>\r\n    //   <h1>{params.someId}</h1>\r\n    //   <Link to=\"..\" relative=\"path\">\r\n    //     Back\r\n    //   </Link>\r\n    // </>\r\n  );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\n// loader 함수를 호출하는 리액트 라우터가 실행되면\r\n// 객체 하나가 loader 함수에 전달된다. 이 객체에는 request와 params라는 프로퍼티가 들어있다.\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n  // 싱글 이벤트에 관한 데이터를 가져오기 위해 fetch 함수를 사용\r\n\r\n  // const response = await fetch('http://localhost:8080/events/' + id);\r\n  // return response;\r\n  // 이 방법도 있지만 아래의 방법도 활용이 가능하다\r\n  // 리액트 라우터는 자동으로 Promise를 기다렸다가 그게 리졸빙한 데이터에 엑세스하게 해준다.\r\n  // return fetch('http://localhost:8080/events/' + id);\r\n\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch details for selected event.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    return response;\r\n  }\r\n  // 이렇게 loader를 추가한 후 이제 loader를 라우트 정의에 등록해야 한다.\r\n  // 리액트 라우터는 loader를 자동으로 찾지 않기 때문에 loader 함수만 추가해서는\r\n  // 아무런 역할을 하지 않는다.\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.eventId;\r\n  // 이렇게만 작성해서 요청을 하게되면 이벤트를 삭제하지 않는다.\r\n  // 이벤트를 삭제하는 건 백엔드가 기다리고 있는 요청이 아니기 때문이다.\r\n  // 대신에 우리는 여기서 전송하는 이 요청을 설정해야 한다.\r\n  // const response = await fetch(\"http://localhost:8080/events/\" + eventId);\r\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\r\n    method: request.method,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not delete event.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n  return redirect(\"/events\");\r\n}\r\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,aAAa,EACbC,kBAAkB,EAClBC,IAAI,EACJC,QAAQ,QACH,kBAAkB;AACzB,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB;EACA;EACA,MAAMC,IAAI,GAAGR,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACEK,OAAA,CAACF,SAAS;IAACM,KAAK,EAAED,IAAI,CAACC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;EAC/B;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAACN,EAAA,CAdQD,eAAe;EAAA,QAGTN,kBAAkB;AAAA;AAAAc,EAAA,GAHxBR,eAAe;AAgBxB,eAAeA,eAAe;;AAE9B;AACA;AACA,OAAO,eAAeS,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMC,EAAE,GAAGD,MAAM,CAACE,OAAO;EACzB;;EAEA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAElE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMrB,IAAI,CACR;MAAEsB,OAAO,EAAE;IAA8C,CAAC,EAC1D;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;EACA;EACA;EACA;AACF;AAEA,OAAO,eAAeK,MAAMA,CAAC;EAAER,MAAM;EAAED;AAAQ,CAAC,EAAE;EAChD,MAAMG,OAAO,GAAGF,MAAM,CAACE,OAAO;EAC9B;EACA;EACA;EACA;EACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,OAAO,EAAE;IACtEO,MAAM,EAAEV,OAAO,CAACU;EAClB,CAAC,CAAC;EAEF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAMrB,IAAI,CACR;MAAEsB,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;EACA,OAAOtB,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAY,EAAA;AAAAa,YAAA,CAAAb,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}