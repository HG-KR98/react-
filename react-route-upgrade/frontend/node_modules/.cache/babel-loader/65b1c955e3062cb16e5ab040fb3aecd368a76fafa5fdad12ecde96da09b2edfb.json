{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\react-route-upgrade\\\\frontend\\\\src\\\\pages\\\\EventDetailPage.js\",\n  _s = $RefreshSig$();\nimport { useParams, useLoaderData, useRouteLoaderData, json, redirect, defer, Await } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function EventDetailPage() {\n  _s();\n  // const params = useParams();\n  // const data = useLoaderData();\n  // const data = useRouteLoaderData(\"event-detail\");\n\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 27\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(Await, {\n        resolve: event,\n        children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n          event: loadedEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true)\n  // <>\n  //   <h1>{params.someId}</h1>\n  //   <Link to=\"..\" relative=\"path\">\n  //     Back\n  //   </Link>\n  // </>\n  ;\n}\n_s(EventDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw json({\n      message: \"Could not fetch details for selected event.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // 수동으로 이벤트 추출\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    return json({\n      message: \"Could not fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    // defer를 사용할 경우 직접 response를 받을 수 없기 때문에 파싱을 해주어야 한다. loader()와 useLoaderData 사이에 defer 단계가 있기 때문임.\n    // defer 기능을 쓰면 페이지 속도가 높아지고 다른 콘텐츠를 기다리는 종안에 약간의 콘텐츠를 이미 보여줄 수 있게 된다.\n    //return response;\n    const resData = await response.json();\n    return resData.events;\n  }\n}\n\n// loader 함수를 호출하는 리액트 라우터가 실행되면\n// 객체 하나가 loader 함수에 전달된다. 이 객체에는 request와 params라는 프로퍼티가 들어있다.\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return defer({\n    event: loadEvent(id),\n    events: loadEvents()\n  });\n  // // 싱글 이벤트에 관한 데이터를 가져오기 위해 fetch 함수를 사용\n\n  // // const response = await fetch('http://localhost:8080/events/' + id);\n  // // return response;\n  // // 이 방법도 있지만 아래의 방법도 활용이 가능하다\n  // // 리액트 라우터는 자동으로 Promise를 기다렸다가 그게 리졸빙한 데이터에 엑세스하게 해준다.\n  // // return fetch('http://localhost:8080/events/' + id);\n\n  // const response = await fetch(\"http://localhost:8080/events/\" + id);\n\n  // if (!response.ok) {\n  //   throw json(\n  //     { message: \"Could not fetch details for selected event.\" },\n  //     {\n  //       status: 500,\n  //     }\n  //   );\n  // } else {\n  //   return response;\n  // }\n  // // 이렇게 loader를 추가한 후 이제 loader를 라우트 정의에 등록해야 한다.\n  // // 리액트 라우터는 loader를 자동으로 찾지 않기 때문에 loader 함수만 추가해서는\n  // // 아무런 역할을 하지 않는다.\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  // 이렇게만 작성해서 요청을 하게되면 이벤트를 삭제하지 않는다.\n  // 이벤트를 삭제하는 건 백엔드가 기다리고 있는 요청이 아니기 때문이다.\n  // 대신에 우리는 여기서 전송하는 이 요청을 설정해야 한다.\n  // const response = await fetch(\"http://localhost:8080/events/\" + eventId);\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: \"Could not delete event.\"\n    }, {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useParams","useLoaderData","useRouteLoaderData","json","redirect","defer","Await","EventItem","EventsList","Suspense","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","event","events","children","fallback","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","resolve","loadedEvent","loadedEvents","_c","loadEvent","id","response","fetch","ok","message","status","resData","loadEvents","loader","request","params","eventId","action","method","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/react-route-upgrade/frontend/src/pages/EventDetailPage.js"],"sourcesContent":["import {\r\n  useParams,\r\n  useLoaderData,\r\n  useRouteLoaderData,\r\n  json,\r\n  redirect,\r\n  defer,\r\n  Await,\r\n} from \"react-router-dom\";\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\nimport { Suspense } from \"react\";\r\n\r\nasync function EventDetailPage() {\r\n  // const params = useParams();\r\n  // const data = useLoaderData();\r\n  // const data = useRouteLoaderData(\"event-detail\");\r\n\r\n  const { event, events } = useRouteLoaderData(\"event-detail\");\r\n\r\n  return (\r\n    <>\r\n      <Suspense fallback={<p style={{ textAlign: \"center\" }}>Loading...</p>}>\r\n        <Await resolve={event}>\r\n          {(loadedEvent) => <EventItem event={loadedEvent} />}\r\n        </Await>\r\n      </Suspense>\r\n      <Await resolve={events}>\r\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\r\n      </Await>\r\n    </>\r\n    // <>\r\n    //   <h1>{params.someId}</h1>\r\n    //   <Link to=\"..\" relative=\"path\">\r\n    //     Back\r\n    //   </Link>\r\n    // </>\r\n  );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nasync function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not fetch details for selected event.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  } else {\r\n    // 수동으로 이벤트 추출\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    return json({ message: \"Could not fetch events.\" }, { status: 500 });\r\n  } else {\r\n    // defer를 사용할 경우 직접 response를 받을 수 없기 때문에 파싱을 해주어야 한다. loader()와 useLoaderData 사이에 defer 단계가 있기 때문임.\r\n    // defer 기능을 쓰면 페이지 속도가 높아지고 다른 콘텐츠를 기다리는 종안에 약간의 콘텐츠를 이미 보여줄 수 있게 된다.\r\n    //return response;\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\n// loader 함수를 호출하는 리액트 라우터가 실행되면\r\n// 객체 하나가 loader 함수에 전달된다. 이 객체에는 request와 params라는 프로퍼티가 들어있다.\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  return defer({\r\n    event: loadEvent(id),\r\n    events: loadEvents(),\r\n  });\r\n  // // 싱글 이벤트에 관한 데이터를 가져오기 위해 fetch 함수를 사용\r\n\r\n  // // const response = await fetch('http://localhost:8080/events/' + id);\r\n  // // return response;\r\n  // // 이 방법도 있지만 아래의 방법도 활용이 가능하다\r\n  // // 리액트 라우터는 자동으로 Promise를 기다렸다가 그게 리졸빙한 데이터에 엑세스하게 해준다.\r\n  // // return fetch('http://localhost:8080/events/' + id);\r\n\r\n  // const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  // if (!response.ok) {\r\n  //   throw json(\r\n  //     { message: \"Could not fetch details for selected event.\" },\r\n  //     {\r\n  //       status: 500,\r\n  //     }\r\n  //   );\r\n  // } else {\r\n  //   return response;\r\n  // }\r\n  // // 이렇게 loader를 추가한 후 이제 loader를 라우트 정의에 등록해야 한다.\r\n  // // 리액트 라우터는 loader를 자동으로 찾지 않기 때문에 loader 함수만 추가해서는\r\n  // // 아무런 역할을 하지 않는다.\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.eventId;\r\n  // 이렇게만 작성해서 요청을 하게되면 이벤트를 삭제하지 않는다.\r\n  // 이벤트를 삭제하는 건 백엔드가 기다리고 있는 요청이 아니기 때문이다.\r\n  // 대신에 우리는 여기서 전송하는 이 요청을 설정해야 한다.\r\n  // const response = await fetch(\"http://localhost:8080/events/\" + eventId);\r\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\r\n    method: request.method,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw json(\r\n      { message: \"Could not delete event.\" },\r\n      {\r\n        status: 500,\r\n      }\r\n    );\r\n  }\r\n  return redirect(\"/events\");\r\n}\r\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,aAAa,EACbC,kBAAkB,EAClBC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACLC,KAAK,QACA,kBAAkB;AACzB,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,eAAeC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EAC/B;EACA;EACA;;EAEA,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,GAAGf,kBAAkB,CAAC,cAAc,CAAC;EAE5D,oBACES,OAAA,CAAAE,SAAA;IAAAK,QAAA,gBACEP,OAAA,CAACF,QAAQ;MAACU,QAAQ,eAAER,OAAA;QAAGS,KAAK,EAAE;UAAEC,SAAS,EAAE;QAAS,CAAE;QAAAH,QAAA,EAAC;MAAU;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAE;MAAAP,QAAA,eACpEP,OAAA,CAACL,KAAK;QAACoB,OAAO,EAAEV,KAAM;QAAAE,QAAA,EAClBS,WAAW,iBAAKhB,OAAA,CAACJ,SAAS;UAACS,KAAK,EAAEW;QAAY;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACXd,OAAA,CAACL,KAAK;MAACoB,OAAO,EAAET,MAAO;MAAAC,QAAA,EACnBU,YAAY,iBAAKjB,OAAA,CAACH,UAAU;QAACS,MAAM,EAAEW;MAAa;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA,eACR;EACF;EACA;EACA;EACA;EACA;EACA;EAAA;AAEJ;AAACV,EAAA,CAzBcD,eAAe;EAAA,QAKFZ,kBAAkB;AAAA;AAAA2B,EAAA,GAL/Bf,eAAe;AA2B9B,eAAeA,eAAe;AAE9B,eAAegB,SAASA,CAACC,EAAE,EAAE;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAElE,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM/B,IAAI,CACR;MAAEgC,OAAO,EAAE;IAA8C,CAAC,EAC1D;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH,CAAC,MAAM;IACL;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC7B,IAAI,CAAC,CAAC;IACrC,OAAOkC,OAAO,CAACpB,MAAM;EACvB;AACF;AAEA,eAAeqB,UAAUA,CAAA,EAAG;EAC1B,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB,OAAO/B,IAAI,CAAC;MAAEgC,OAAO,EAAE;IAA0B,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACtE,CAAC,MAAM;IACL;IACA;IACA;IACA,MAAMC,OAAO,GAAG,MAAML,QAAQ,CAAC7B,IAAI,CAAC,CAAC;IACrC,OAAOkC,OAAO,CAACpB,MAAM;EACvB;AACF;;AAEA;AACA;AACA,OAAO,eAAesB,MAAMA,CAAC;EAAEC,OAAO;EAAEC;AAAO,CAAC,EAAE;EAChD,MAAMV,EAAE,GAAGU,MAAM,CAACC,OAAO;EAEzB,OAAOrC,KAAK,CAAC;IACXW,KAAK,EAAEc,SAAS,CAACC,EAAE,CAAC;IACpBd,MAAM,EAAEqB,UAAU,CAAC;EACrB,CAAC,CAAC;EACF;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAEA,OAAO,eAAeK,MAAMA,CAAC;EAAEF,MAAM;EAAED;AAAQ,CAAC,EAAE;EAChD,MAAME,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B;EACA;EACA;EACA;EACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGS,OAAO,EAAE;IACtEE,MAAM,EAAEJ,OAAO,CAACI;EAClB,CAAC,CAAC;EAEF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM/B,IAAI,CACR;MAAEgC,OAAO,EAAE;IAA0B,CAAC,EACtC;MACEC,MAAM,EAAE;IACV,CACF,CAAC;EACH;EACA,OAAOhC,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAyB,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}