{"ast":null,"code":"import { createStore, combineReducers } from \"redux\";\n// createSlice가 createReducer보다 더 강력하다.\n// configureStore는 createStore처럼 store를 만들지만 여러 개의\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState,\n  reducers: {\n    increment(state) {\n      // Redux만 사용할 때는 이런식으로 상태를 직접 변경하면 안됐으나 tootkit과\n      // 같이 사용하면 toolkit이 immer라는 다른 패키지를 사용하는데 이런 코드를 감지하고\n      // 자동으로 원래 있는 상태를 복제한다. 그리고 새로운 상태 객체를 생성하고 모든 상태를 변경할 수 없게 유지하고,\n      // 우리가 변경한 상태는 변하지 않도록 오버라이드 한다.\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\n// createSlice에서 actions의 객체에 접근하는 방법\n// 메소드를 호출하면 액션 객체가 생성된다. (액션 생성자)\n// 이런 객체는 액션마다 다른 고유 식별자와 함께 이미 type 프로퍼티를 가지고 있다.\n//\ncounterSlice.actions.toggleCounter;\n\n// 상태를 업데이트 할때는 기존의 값을 덮어씌운다는 개념이다.\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === \"increment\") {\n//     // 밑의 코드로 작성하면 작동은 하는데 잘못된 방법인 이유는\n//     // Redux로 작업할 때 절대로 해서는 안되는 것이며 절대 기존의 state를\n//     // 변형해서는 안되기 때문이다. 새로운 state 객체를 반환하여 항상 재정의 하는 방법을 사용해야한다.\n//     // javaScript에서는 객체나 배열이 참조 값\n//     // state.counter++;\n//     // return state;\n\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       howCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       counter: state.counter,\n//       howCounter: !state.showCounter,\n//     };\n//   }\n\n//   return state;\n// };\n\n// createStore에는 하나의 reducer만 적용해야한다.\n// configureStore는 createStore처럼 store를 만든다.\n// 하지만 다른 점으로 여러 개의 리듀서를 하나의 리듀서로 쉽게 합칠 수 있다.\nconst store = redux.configureStore({\n  reducer: counterSlice.reducer\n});\n\n// const store = redux.createStore(counterSlice.reducer);\n\n// const counterSubscriber = () => {\n//   const latestState = store.getState();\n//   console.log(latestState);\n// };\n\n// store.subscribe(counterSubscriber);\n\n// store.dispatch({ type: \"increment\" });\n// store.dispatch({ type: \"decrement\" });\n\nexport default store;","map":{"version":3,"names":["createStore","combineReducers","createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","amount","toggleCounter","actions","store","redux","reducer"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/redux-project/src/store/index.js"],"sourcesContent":["import { createStore, combineReducers } from \"redux\";\r\n// createSlice가 createReducer보다 더 강력하다.\r\n// configureStore는 createStore처럼 store를 만들지만 여러 개의\r\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    increment(state) {\r\n      // Redux만 사용할 때는 이런식으로 상태를 직접 변경하면 안됐으나 tootkit과\r\n      // 같이 사용하면 toolkit이 immer라는 다른 패키지를 사용하는데 이런 코드를 감지하고\r\n      // 자동으로 원래 있는 상태를 복제한다. 그리고 새로운 상태 객체를 생성하고 모든 상태를 변경할 수 없게 유지하고,\r\n      // 우리가 변경한 상태는 변하지 않도록 오버라이드 한다.\r\n      state.counter++;\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.amount;\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// createSlice에서 actions의 객체에 접근하는 방법\r\n// 메소드를 호출하면 액션 객체가 생성된다. (액션 생성자)\r\n// 이런 객체는 액션마다 다른 고유 식별자와 함께 이미 type 프로퍼티를 가지고 있다.\r\n//\r\ncounterSlice.actions.toggleCounter;\r\n\r\n// 상태를 업데이트 할때는 기존의 값을 덮어씌운다는 개념이다.\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     // 밑의 코드로 작성하면 작동은 하는데 잘못된 방법인 이유는\r\n//     // Redux로 작업할 때 절대로 해서는 안되는 것이며 절대 기존의 state를\r\n//     // 변형해서는 안되기 때문이다. 새로운 state 객체를 반환하여 항상 재정의 하는 방법을 사용해야한다.\r\n//     // javaScript에서는 객체나 배열이 참조 값\r\n//     // state.counter++;\r\n//     // return state;\r\n\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       howCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       counter: state.counter,\r\n//       howCounter: !state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// createStore에는 하나의 reducer만 적용해야한다.\r\n// configureStore는 createStore처럼 store를 만든다.\r\n// 하지만 다른 점으로 여러 개의 리듀서를 하나의 리듀서로 쉽게 합칠 수 있다.\r\nconst store = redux.configureStore({\r\n  reducer: counterSlice.reducer,\r\n});\r\n\r\n// const store = redux.createStore(counterSlice.reducer);\r\n\r\n// const counterSubscriber = () => {\r\n//   const latestState = store.getState();\r\n//   console.log(latestState);\r\n// };\r\n\r\n// store.subscribe(counterSubscriber);\r\n\r\n// store.dispatch({ type: \"increment\" });\r\n// store.dispatch({ type: \"decrement\" });\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,eAAe,QAAQ,OAAO;AACpD;AACA;AACA,SAASC,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;AAEtD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC/BM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAASA,CAACC,KAAK,EAAE;MACf;MACA;MACA;MACA;MACAA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,EAAE;IACjB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MACtBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,MAAM;IAC/C,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAE;MACnBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IACxC;EACF;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAC,YAAY,CAACU,OAAO,CAACD,aAAa;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAME,KAAK,GAAGC,KAAK,CAAChB,cAAc,CAAC;EACjCiB,OAAO,EAAEb,YAAY,CAACa;AACxB,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}