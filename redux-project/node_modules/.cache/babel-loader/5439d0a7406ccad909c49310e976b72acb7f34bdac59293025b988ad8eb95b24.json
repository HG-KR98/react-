{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\redux-project\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { Component } from \"react\";\n// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { counterActions } from \"../store/index.js\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const dispatch = useDispatch();\n\n  // useSelector를 사용할 때 react-redux는 이 컴포넌트를 위해 리덕스 저장소에\n  // 자동으로 구독을 설정한다는 게 중요하다.\n  const counter = useSelector(state => state.counter);\n  const show = useSelector(state => state.showCounter);\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n    // dispatch({ type: \"toggle\" });\n  };\n  const incrementHandler = () => {\n    dispatch(counterActions.increase({}));\n    // dispatch({ type: \"increment\" });\n  };\n  const increaseHandler = () => {\n    dispatch(counterActions.increment);\n    // dispatch({ type: \"increase\", amount: 5 });\n  };\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n    // dispatch({ type: \"decrement\" });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"a6W6bcAuHVADZPU2xn93xNQZltc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Counter;\nexport default Counter;\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n\n// 실행하지는 않고 포인트만 함.\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["Component","useSelector","useDispatch","connect","counterActions","classes","jsxDEV","_jsxDEV","Counter","_s","dispatch","counter","state","show","showCounter","toggleCounterHandler","toggleCounter","incrementHandler","increase","increaseHandler","increment","decrementHandler","decrement","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/redux-project/src/components/Counter.js"],"sourcesContent":["import { Component } from \"react\";\n// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { counterActions } from \"../store/index.js\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  const dispatch = useDispatch();\n\n  // useSelector를 사용할 때 react-redux는 이 컴포넌트를 위해 리덕스 저장소에\n  // 자동으로 구독을 설정한다는 게 중요하다.\n  const counter = useSelector((state) => state.counter);\n  const show = useSelector((state) => state.showCounter);\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n    // dispatch({ type: \"toggle\" });\n  };\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increase({}));\n    // dispatch({ type: \"increment\" });\n  };\n\n  const increaseHandler = () => {\n    dispatch(counterActions.increment);\n    // dispatch({ type: \"increase\", amount: 5 });\n  };\n\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n    // dispatch({ type: \"decrement\" });\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n\n// 실행하지는 않고 포인트만 함.\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}