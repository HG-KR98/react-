{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\redux-project\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\n// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  useSelector();\n  const toggleCounterHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: \"-- COUNTER VALUE --\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useSelector","classes","jsxDEV","_jsxDEV","Counter","_s","toggleCounterHandler","className","counter","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/redux-project/src/components/Counter.js"],"sourcesContent":["// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector } from \"react-redux\";\n\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  useSelector();\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>-- COUNTER VALUE --</div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAW,QAAQ,aAAa;AAEzC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpBL,WAAW,CAAC,CAAC;EACb,MAAMM,oBAAoB,GAAGA,CAAA,KAAM,CAAC,CAAC;EAErC,oBACEH,OAAA;IAAMI,SAAS,EAAEN,OAAO,CAACO,OAAQ;IAAAC,QAAA,gBAC/BN,OAAA;MAAAM,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBV,OAAA;MAAKI,SAAS,EAAEN,OAAO,CAACa,KAAM;MAAAL,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxDV,OAAA;MAAQY,OAAO,EAAET,oBAAqB;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;AAACR,EAAA,CAXID,OAAO;EAAA,QACXJ,WAAW;AAAA;AAAAgB,EAAA,GADPZ,OAAO;AAab,eAAeA,OAAO;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}