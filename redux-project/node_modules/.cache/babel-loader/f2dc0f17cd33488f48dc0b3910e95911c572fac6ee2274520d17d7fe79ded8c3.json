{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\n\n// 상태를 업데이트 할때는 기존의 값을 덮어씌운다는 개념이다.\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === \"increment\") {\n    // 밑의 코드로 작성하면 작동은 하는데 잘못된 방법인 이유는\n    // Redux로 작업할 때 \n    // state.counter++;\n    // return state;\n\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      howCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      howCounter: !state.showCounter\n    };\n  }\n  return state;\n};\nconst store = redux.createStore(counterReducer);\n\n// const counterSubscriber = () => {\n//   const latestState = store.getState();\n//   console.log(latestState);\n// };\n\n// store.subscribe(counterSubscriber);\n\n// store.dispatch({ type: \"increment\" });\n// store.dispatch({ type: \"decrement\" });\n\nexport default store;","map":{"version":3,"names":["createStore","initialState","counter","showCounter","counterReducer","state","action","type","amount","howCounter","store","redux"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/redux-project/src/store/index.js"],"sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = { counter: 0, showCounter: true };\r\n\r\n// 상태를 업데이트 할때는 기존의 값을 덮어씌운다는 개념이다.\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    // 밑의 코드로 작성하면 작동은 하는데 잘못된 방법인 이유는\r\n    // Redux로 작업할 때 \r\n    // state.counter++;\r\n    // return state;\r\n\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      howCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      howCounter: !state.showCounter,\r\n    };\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = redux.createStore(counterReducer);\r\n\r\n// const counterSubscriber = () => {\r\n//   const latestState = store.getState();\r\n//   console.log(latestState);\r\n// };\r\n\r\n// store.subscribe(counterSubscriber);\r\n\r\n// store.dispatch({ type: \"increment\" });\r\n// store.dispatch({ type: \"decrement\" });\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAK,CAAC;;AAEtD;AACA,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACvD,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B;IACA;IACA;IACA;;IAEA,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEE,KAAK,CAACF;IACrB,CAAC;EACH;EAEA,IAAIG,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,MAAM;MACtCC,UAAU,EAAEJ,KAAK,CAACF;IACpB,CAAC;EACH;EAEA,IAAIG,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEE,KAAK,CAACF;IACrB,CAAC;EACH;EAEA,IAAIG,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OAAO;MACtBO,UAAU,EAAE,CAACJ,KAAK,CAACF;IACrB,CAAC;EACH;EAEA,OAAOE,KAAK;AACd,CAAC;AAED,MAAMK,KAAK,GAAGC,KAAK,CAACX,WAAW,CAACI,cAAc,CAAC;;AAE/C;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,eAAeM,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}