{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uAE40\\uD5CC\\uADDC\\\\Desktop\\\\\\uB9AC\\uC561\\uD2B8 \\uACF5\\uBD80\\\\react-\\\\redux-project\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { Component } from \"react\";\n// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const dispatch = useDispatch();\n\n  // useSelector를 사용할 때 react-redux는 이 컴포넌트를 위해 리덕스 저장소에\n  // 자동으로 구독을 설정한다는 게 중요하다.\n  const counter = useSelector(state => state.counter);\n  const toggleCounterHandler = () => {};\n  const incrementHandler = () => {\n    dispatch({\n      type: \"increment\"\n    });\n  };\n  const decrementHandler = () => {\n    dispatch({\n      type: \"decrement\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n\n// 실행하지는 않고 포인트만 함.\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n_s(Counter, \"gthwM6sqboLtlTmr2wLRFX51eJQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["Component","useSelector","useDispatch","connect","classes","jsxDEV","_jsxDEV","Counter","_s","dispatch","counter","state","toggleCounterHandler","incrementHandler","type","decrementHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["C:/Users/김헌규/Desktop/리액트 공부/react-/redux-project/src/components/Counter.js"],"sourcesContent":["import { Component } from \"react\";\n// redux 팀이 만든 커스텀 훅\n// useStore 훅도 있지만 useSelector를 사용하는 이유는\n// 저장소가 관리하는 상태 부분을 우리가 자동으로 선택할 수 있기 때문이다.\n// 만약 클래스형 컴포넌트를 사용할 경우 connect 함수를 사용하여\n// 이를 감싸는 래퍼로 사용해서 그 클래스 컴포넌트를 저장소에 연결할 수 있다.\nimport { useSelector, useDispatch, connect } from \"react-redux\";\n\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  const dispatch = useDispatch();\n\n  // useSelector를 사용할 때 react-redux는 이 컴포넌트를 위해 리덕스 저장소에\n  // 자동으로 구독을 설정한다는 게 중요하다.\n  const counter = useSelector((state) => state.counter);\n  const toggleCounterHandler = () => {};\n\n  const incrementHandler = () => {\n    dispatch({ type: \"increment\" });\n  };\n  const decrementHandler = () => {\n    dispatch({ type: \"decrement\" });\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{counter}</div>\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\n\n\n// class Counter extends Component {\n//   incrementHandler() {\n//     this.props.increment();\n//   }\n\n//   decrementHandler() {\n//     this.props.decrement();\n//   }\n\n//   toggleCounterHandler() {}\n\n//   render() {\n//     return (\n//       <main className={classes.counter}>\n//         <h1>Redux Counter</h1>\n//         <div className={classes.value}>{this.props.counter}</div>\n//         <div>\n//           <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n//           <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n//         </div>\n//         <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n//       </main>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     counter: state.counter,\n//   };\n// };\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     increment: () => dispatch({ type: \"increment\" }),\n//     decrement: () => dispatch({ type: \"decrement\" }),\n//   };\n// };\n\n// 실행하지는 않고 포인트만 함.\n// export default connect(mapStateToProps, mapDispatchToProps)(Counter);\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,EAAEC,WAAW,EAAEC,OAAO,QAAQ,aAAa;AAE/D,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,MAAMQ,OAAO,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACD,OAAO,CAAC;EACrD,MAAME,oBAAoB,GAAGA,CAAA,KAAM,CAAC,CAAC;EAErC,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BJ,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAY,CAAC,CAAC;EACjC,CAAC;EACD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BN,QAAQ,CAAC;MAAEK,IAAI,EAAE;IAAY,CAAC,CAAC;EACjC,CAAC;EAED,oBACER,OAAA;IAAMU,SAAS,EAAEZ,OAAO,CAACM,OAAQ;IAAAO,QAAA,gBAC/BX,OAAA;MAAAW,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBf,OAAA;MAAKU,SAAS,EAAEZ,OAAO,CAACkB,KAAM;MAAAL,QAAA,EAAEP;IAAO;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9Cf,OAAA;MAAAW,QAAA,gBACEX,OAAA;QAAQiB,OAAO,EAAEV,gBAAiB;QAAAI,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDf,OAAA;QAAQiB,OAAO,EAAER,gBAAiB;QAAAE,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACNf,OAAA;MAAQiB,OAAO,EAAEX,oBAAqB;MAAAK,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;;AAID;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAAb,EAAA,CAtEMD,OAAO;EAAA,QACML,WAAW,EAIZD,WAAW;AAAA;AAAAuB,EAAA,GALvBjB,OAAO;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}